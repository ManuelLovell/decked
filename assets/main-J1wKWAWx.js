import"./modulepreload-polyfill-B5Qt9EMX.js";import{O as i,C as l,a as o,b as w,c as g,d as N}from"./bsConstants-Ci3gOeKI.js";function H(n){return n.type==="IMAGE"}class f{static PLAYER="PLAYER";static PARTY="PARTY";static LOCALITEMS="LOCALITEMS";static SCENEITEMS="SCENEITEMS";static SCENEMETA="SCENEMETADATA";static SCENEGRID="SCENEGRID";static ROOMMETA="ROOMMETADATA";debouncedOnSceneItemsChange;debouncedOnSceneMetadataChange;debouncedOnPartyChange;playerId;playerConnection;playerColor;playerName;playerMetadata;playerRole;currentDealer;party;lastParty;gridDpi;gridScale;sceneItems;sceneSelected;sceneMetadata;sceneReady;activeCards;activeDecks;roomMetadata;theme;caches;USER_REGISTERED;historyLog;sceneMetadataHandler;localItemsHandler;sceneItemsHandler;sceneGridHandler;sceneReadyHandler;playerHandler;partyHandler;themeHandler;roomHandler;constructor(e){this.playerId="",this.playerConnection="",this.playerName="",this.playerColor="",this.playerMetadata={},this.playerRole="PLAYER",this.currentDealer="",this.party=[],this.lastParty=[],this.sceneItems=[],this.sceneSelected=[],this.sceneMetadata={},this.activeCards=[],this.activeDecks=[],this.gridDpi=0,this.gridScale=5,this.sceneReady=!1,this.theme="DARK",this.roomMetadata={},this.USER_REGISTERED=!1,this.caches=e,this.historyLog={},this.debouncedOnSceneItemsChange=T(this.OnSceneItemsChange.bind(this),100),this.debouncedOnSceneMetadataChange=T(this.OnSceneMetadataChanges.bind(this),100),this.debouncedOnPartyChange=T(this.OnPartyChange.bind(this),100)}async InitializeCache(){this.sceneReady=await i.scene.isReady(),this.theme=await i.theme.getTheme(),v(this.theme,document),this.caches.includes(f.PLAYER)&&(this.playerId=await i.player.getId(),this.playerConnection=await i.player.getConnectionId(),this.playerName=await i.player.getName(),this.playerColor=await i.player.getColor(),this.playerMetadata=await i.player.getMetadata(),this.playerRole=await i.player.getRole()),this.caches.includes(f.PARTY)&&(this.party=await i.party.getPlayers(),this.lastParty=this.party),this.caches.includes(f.SCENEITEMS)&&this.sceneReady&&(this.sceneItems=await i.scene.items.getItems()),this.caches.includes(f.SCENEMETA)&&this.sceneReady&&(this.sceneMetadata=await i.scene.getMetadata()),this.caches.includes(f.SCENEGRID)&&this.sceneReady&&(this.gridDpi=await i.scene.grid.getDpi(),this.gridScale=(await i.scene.grid.getScale()).parsed?.multiplier??5),this.caches.includes(f.ROOMMETA)&&(this.roomMetadata=await i.room.getMetadata(),await this.RefreshDealer())}KillHandlers(){this.caches.includes(f.SCENEMETA)&&this.sceneMetadataHandler!==void 0&&this.sceneMetadataHandler(),this.caches.includes(f.SCENEITEMS)&&this.sceneItemsHandler!==void 0&&this.sceneItemsHandler(),this.caches.includes(f.SCENEITEMS)&&this.localItemsHandler!==void 0&&this.localItemsHandler(),this.caches.includes(f.SCENEGRID)&&this.sceneGridHandler!==void 0&&this.sceneGridHandler(),this.caches.includes(f.PLAYER)&&this.playerHandler!==void 0&&this.playerHandler(),this.caches.includes(f.PARTY)&&this.partyHandler!==void 0&&this.partyHandler(),this.caches.includes(f.ROOMMETA)&&this.roomHandler!==void 0&&this.roomHandler(),this.themeHandler!==void 0&&this.themeHandler()}SetupHandlers(){(this.sceneMetadataHandler===void 0||this.sceneMetadataHandler.length===0)&&this.caches.includes(f.SCENEMETA)&&(this.sceneMetadataHandler=i.scene.onMetadataChange(async e=>{this.sceneMetadata=e,this.debouncedOnSceneMetadataChange(e)})),(this.sceneItemsHandler===void 0||this.sceneItemsHandler.length===0)&&this.caches.includes(f.SCENEITEMS)&&(this.sceneItemsHandler=i.scene.items.onChange(async e=>{this.sceneItems=e,this.debouncedOnSceneItemsChange(e)})),(this.sceneGridHandler===void 0||this.sceneGridHandler.length===0)&&this.caches.includes(f.SCENEGRID)&&(this.sceneGridHandler=i.scene.grid.onChange(async e=>{this.gridDpi=e.dpi,this.gridScale=parseInt(e.scale),await this.OnSceneGridChange(e)})),(this.playerHandler===void 0||this.playerHandler.length===0)&&this.caches.includes(f.PLAYER)&&(this.playerHandler=i.player.onChange(async e=>{this.playerName=e.name,this.playerColor=e.color,this.playerId=e.id,this.playerConnection=e.connectionId,this.playerRole=e.role,this.playerMetadata=e.metadata,await this.OnPlayerChange(e)})),(this.partyHandler===void 0||this.partyHandler.length===0)&&this.caches.includes(f.PARTY)&&(this.partyHandler=i.party.onChange(async e=>{this.party=e.filter(s=>s.id!==""),this.debouncedOnPartyChange(e)})),(this.roomHandler===void 0||this.roomHandler.length===0)&&this.caches.includes(f.ROOMMETA)&&(this.roomHandler=i.room.onMetadataChange(async e=>{this.roomMetadata=e,await this.OnRoomMetadataChange(e)})),this.themeHandler===void 0&&(this.themeHandler=i.theme.onChange(async e=>{this.theme=e.mode,await this.OnThemeChange(e)})),this.sceneReadyHandler===void 0&&(this.sceneReadyHandler=i.scene.onReadyChange(async e=>{this.sceneReady=e,e&&(this.sceneItems=await i.scene.items.getItems(H),this.sceneMetadata=await i.scene.getMetadata(),this.gridDpi=await i.scene.grid.getDpi(),this.gridScale=(await i.scene.grid.getScale()).parsed?.multiplier??5),await this.OnSceneReadyChange(e)}))}async OnSceneMetadataChanges(e){this.playerRole}async OnLocalItemsChange(e){}async OnSceneItemsChange(e){if(this.sceneReady&&this.playerId===this.currentDealer){this.activeCards=this.sceneItems.filter(t=>t.metadata[`${l.EXTENSIONID}/card_data`]!==void 0),this.activeDecks=this.sceneItems.filter(t=>t.metadata[`${l.EXTENSIONID}/deck_data`]!==void 0);const s=[];for(const t of this.activeDecks){for(const a of this.activeCards)if(M(a.position,t.position,25)){const r=a.zIndex>t.zIndex,h=a.metadata[`${l.EXTENSIONID}/card_data`];h.FaceUp=!1,await i.scene.items.updateItems(I=>I.id===t.id,I=>{for(let p of I){const d=p.metadata[`${l.EXTENSIONID}/deck_data`];r?d.Cards.push(h):d.Cards.unshift(h);const m=r?d.Cards[d.Cards.length-1]:d.Cards[0],u=y(m.BackUrl);p.image.url=m.BackUrl,p.image.mime=`image/${u}`,p.text.plainText=d.Cards.length.toString()}}),s.push(a.id)}for(const a of this.activeDecks){if(a.id===t.id||s.includes(t.id))continue;if(M(a.position,t.position,25)){const r=a.zIndex>t.zIndex,h=t.metadata[`${l.EXTENSIONID}/deck_data`],I=a.metadata[`${l.EXTENSIONID}/deck_data`];await i.scene.items.updateItems(d=>d.id===t.id,d=>{for(let m of d){const u=m.metadata[`${l.EXTENSIONID}/deck_data`],E=r?[...u.Cards,...I.Cards]:[...I.Cards,...u.Cards];u.Cards=E;const k=r?u.Cards[u.Cards.length-1]:u.Cards[0],O=y(k.BackUrl);m.image.url=k.BackUrl,m.image.mime=`image/${O}`,m.text.plainText=u.Cards.length.toString()}});const p=D.sceneItems.find(d=>d.attachedTo===t.id&&d.metadata[`${l.EXTENSIONID}/deck_id_lines`]!==void 0);await i.scene.items.updateItems(d=>d.id===p.id,d=>{for(let m of d)m.position={x:t.position.x,y:t.position.y+Math.min(h.Cards.length+I.Cards.length,75)}}),s.push(a.id)}}}s.length>0&&await i.scene.items.deleteItems(s)}}async OnSceneGridChange(e){}async OnSceneReadyChange(e){}async OnPlayerChange(e){e.selection?.length}async OnPartyChange(e){e.length!==this.lastParty.length&&await this.RefreshDealer(),this.lastParty=e,console.log(e)}async OnRoomMetadataChange(e){}async OnThemeChange(e){v(e,document)}async RefreshDealer(){this.currentDealer=this.roomMetadata[`${l.EXTENSIONID}/dealer`];const e=this.currentDealer===this.playerId,s=this.party.find(t=>t.id===this.currentDealer);(!this.currentDealer||!e&&!s)&&await i.room.setMetadata({[`${l.EXTENSIONID}/dealer`]:this.playerId})}}const D=new f([f.PLAYER,f.PARTY,f.SCENEITEMS,f.SCENEMETA,f.ROOMMETA]);function R(n,e){return n=Math.ceil(n),e=Math.floor(e),Math.floor(Math.random()*(e-n+1))+n}function A(){let n=new Date().getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,s=>{const t=(n+Math.random()*16)%16|0;return n=Math.floor(n/16),(s==="x"?t:t&3|8).toString(16)})}function M(n,e,s){const t=n.x-e.x,a=n.y-e.y;return Math.sqrt(t*t+a*a)<=s}function U(n){for(let e=n.length-1;e>0;e--){const s=Math.floor(Math.random()*(e+1));[n[e],n[s]]=[n[s],n[e]]}return n}function y(n){const t=new URL(n).pathname.split(".").pop();return t||""}function T(n,e){let s;return function(...a){s&&clearTimeout(s),s=setTimeout(()=>{n(...a),s=void 0},e)}}function S(n,e){const a=234/n,c=333/e;return{x:a,y:c}}function b(n){return new Promise((e,s)=>{const t=new Image;t.onload=()=>{const a={x:t.naturalWidth,y:t.naturalHeight};e(a)},t.onerror=a=>{s(a)},t.src=n})}function v(n,e){const s=window.matchMedia("(prefers-color-scheme: dark)"),t=s.matches?"dark":"light",a=s.matches?"light":"dark";for(var c=0;c<e.styleSheets.length;c++)for(var r=0;r<e.styleSheets[c].cssRules.length;r++){let h=e.styleSheets[c].cssRules[r];h&&h.media&&h.media.mediaText.includes("prefers-color-scheme")&&(n.mode=="LIGHT"?(h.media.appendMedium(`(prefers-color-scheme: ${t})`),h.media.mediaText.includes(a)&&h.media.deleteMedium(`(prefers-color-scheme: ${a})`)):n.mode=="DARK"&&(h.media.appendMedium(`(prefers-color-scheme: ${a})`),h.media.mediaText.includes(t)&&h.media.deleteMedium(`(prefers-color-scheme: ${t})`)))}}async function P(){await i.contextMenu.create({id:l.CUTCARDSID,icons:[{icon:"/icon.svg",label:"Cut Deck",filter:{every:[{key:["metadata",`${l.EXTENSIONID}/deck_data`],value:void 0,operator:"!=",coordinator:"&&"}],max:1}}],async onClick(n,e){for(const s of n.items){const t=s.metadata[`${l.EXTENSIONID}/deck_data`];if(t.Cards.length<=3)await i.notification.show("You need at least four cards to cut the deck.");else{const a=Math.ceil(t.Cards.length/2),c=t.Cards.slice(0,a),r=t.Cards.slice(a);await i.scene.items.updateItems(n.items,m=>{for(let u of m){const E=c[c.length-1],k=y(E.BackUrl);u.metadata[`${l.EXTENSIONID}/deck_data`]={Id:t.Id,Cards:c},u.image.url=E.BackUrl,u.image.mime=`image/${k}`,u.text.plainText=c.length.toString()}});const h=D.sceneItems.find(m=>m.attachedTo===s.id&&m.metadata[`${l.EXTENSIONID}/deck_id_lines`]!==void 0);await i.scene.items.updateItems(m=>m.id===h.id,m=>{for(let u of m)u.position={x:s.position.x,y:s.position.y+Math.min(c.length,75)}});const I={x:s.position.x+300,y:s.position.y},p={Cards:r,Id:r[0].DeckId},d=C.CreateDeck(r[p.Cards.length-1].BackUrl,p,I);i.scene.items.addItems(d)}}}}),await i.contextMenu.create({id:l.SHUFFLECARDSID,icons:[{icon:"/icon.svg",label:"Shuffle Cards",filter:{every:[{key:["metadata",`${l.EXTENSIONID}/deck_data`],value:void 0,operator:"!=",coordinator:"&&"}]}}],async onClick(n,e){await i.scene.items.updateItems(n.items,s=>{for(let t of s){const a=t.metadata[`${l.EXTENSIONID}/deck_data`];a.Cards=U(a.Cards);const c=a.Cards[a.Cards.length-1],r=y(c.BackUrl);t.image.url=c.BackUrl,t.image.mime=`image/${r}`}}),await i.notification.show("The deck has been shuffled.","DEFAULT")}}),await i.contextMenu.create({id:l.FLIPCARDID,icons:[{icon:"/icon.svg",label:"Flip Card",filter:{every:[{key:["metadata",`${l.EXTENSIONID}/card_data`],value:void 0,operator:"!=",coordinator:"&&"}]}}],async onClick(n,e){await i.scene.items.updateItems(n.items,s=>{for(let t of s){const a=t.metadata[`${l.EXTENSIONID}/card_data`],c=y(a.FaceUp===!0?a.BackUrl:a.FrontUrl);t.image.url=a.FaceUp===!0?a.BackUrl:a.FrontUrl,t.image.mime=`image/${c}`,a.FaceUp=a.FaceUp!==!0,t.metadata[`${l.EXTENSIONID}/card_data`]=a}})}}),await i.contextMenu.create({id:l.GROUPCARDSID,icons:[{icon:"/icon.svg",label:"Group Cards",filter:{every:[{key:["metadata",`${l.EXTENSIONID}/card_data`],value:void 0,operator:"!=",coordinator:"&&"}],min:2}}],async onClick(n,e){const t=n.items[0].position,a=[];for(let h of n.items){const I=h.metadata[`${l.EXTENSIONID}/card_data`];I.FaceUp=!1,a.push(I)}const c={Cards:a,Id:a[0].DeckId},r=C.CreateDeck(a[c.Cards.length-1].BackUrl,c,t);i.scene.items.addItems(r),i.scene.items.deleteItems(n.items.map(h=>h.id))}}),await i.contextMenu.create({id:l.DRAWCARDID,icons:[{icon:"/icon.svg",label:"Draw Card",filter:{every:[{key:["metadata",`${l.EXTENSIONID}/deck_data`],value:void 0,operator:"!=",coordinator:"&&"}]}}],async onClick(n,e){const s=[];let t=300+R(10,35),a=0+R(10,35);for(const c of n.items){const r=c.metadata[`${l.EXTENSIONID}/deck_data`],h=r.Cards[r.Cards.length-1];if(h){const I=C.CreateCardFromData(h);if(I.position={x:c.position.x+t,y:c.position.y+a},s.push(I),r.Cards.length>2){await i.scene.items.updateItems(n.items,d=>{for(let m of d){const u=m.metadata[`${l.EXTENSIONID}/deck_data`];u.Cards.pop();const E=u.Cards[u.Cards.length-1],k=y(E.BackUrl);m.image.url=E.BackUrl,m.image.mime=`image/${k}`,m.text.plainText=u.Cards.length.toString()}});const p=D.sceneItems.find(d=>d.attachedTo===c.id&&d.metadata[`${l.EXTENSIONID}/deck_id_lines`]!==void 0);await i.scene.items.updateItems(d=>d.id===p.id,d=>{for(let m of d)m.position={x:c.position.x,y:c.position.y+Math.min(r.Cards.length,75)}})}else if(r.Cards.length===2){const p=r.Cards[0],d=C.CreateCardFromData(p);d.position={x:c.position.x,y:c.position.y},s.push(d),await i.scene.items.deleteItems(n.items.map(m=>m.id))}}}await i.scene.items.addItems(s)}})}async function x(){await D.InitializeCache(),await C.InitializeDecked(),D.SetupHandlers()}i.onReady(async()=>{if(await i.scene.isReady()===!1){const e=i.scene.onReadyChange(async s=>{s&&(e(),await x())})}else await x()});class L{backLoaded=!0;frontLoaded=!0;defaultDeckBacks=document.getElementById("defaultBacks");defaultDeckTypes=document.getElementById("defaultDecks");defaultDeckCreation=document.getElementById("defaultDeckCreation");defaultPanel=document.getElementById("defaultPanel");customDeckCreation=document.getElementById("customDeckCreation");customPanel=document.getElementById("customPanel");frontPreview=document.getElementById("frontPreview");backPreview=document.getElementById("backPreview");selectTokenButton=document.getElementById("selectTokenButton");useUrlInput=document.getElementById("useUrlInput");useUrlOKButton=document.getElementById("useUrlOKButton");createDeckButton=document.getElementById("createDeckButton");constructor(){}async Testing(){this.frontPreview.onload=()=>{this.frontPreview.src!=="https://battle-system.com/owlbear/decked-docs/cards/error_card.webp"&&(this.frontLoaded=!0)},this.frontPreview.onerror=()=>{this.frontLoaded=!1,this.frontPreview.src="https://battle-system.com/owlbear/decked-docs/cards/error_card.webp"},this.backPreview.onload=()=>{this.backPreview.src!=="https://battle-system.com/owlbear/decked-docs/cards/error_card.webp"&&(this.backLoaded=!0)},this.backPreview.onerror=()=>{this.backLoaded=!1,this.backPreview.src="https://battle-system.com/owlbear/decked-docs/cards/error_card.webp"},o.DEFAULTBACKS.forEach(e=>{const s=e.replace(o.BASE,"").replace(/^backs_/,"").replace(/\.png$/,""),t=s.charAt(0).toUpperCase()+s.slice(1),a=document.createElement("option");a.value=e,a.textContent=t,this.defaultDeckBacks.appendChild(a)}),this.defaultDeckBacks.onchange=e=>{const t=e.currentTarget.value;this.backPreview.src=t},o.DEFAULTDECKS.forEach(e=>{const s=document.createElement("option");s.value=e,s.textContent=e,this.defaultDeckTypes.appendChild(s)}),this.defaultDeckTypes.onchange=e=>{switch(e.currentTarget.value){case"Base52":this.frontPreview.src=o.SPADES_KING;break;case"Tarot Major":this.frontPreview.src=o.BASE+"major_tower.webp";break;case"Tarot Minor":this.frontPreview.src=o.BASE+"swords_king.webp";break;case"D20":this.frontPreview.src=o.BASE+"dice_20.webp";break}},this.defaultDeckCreation.onclick=e=>{e.preventDefault(),this.defaultPanel.style.display="block",this.defaultDeckCreation.classList.add("selected"),this.customPanel.style.display="none",this.customDeckCreation.classList.remove("selected")},this.customDeckCreation.onclick=e=>{e.preventDefault(),this.defaultPanel.style.display="none",this.defaultDeckCreation.classList.remove("selected"),this.customPanel.style.display="block",this.customDeckCreation.classList.add("selected")},this.selectTokenButton.onclick=async e=>{e.preventDefault();const s=await i.player.getSelection();if(s===void 0||s.length===0)return;const t=D.sceneItems.filter(r=>s.includes(r.id));if(t.length===0)return;const a=t.filter(r=>r.image?.url!==void 0);if(a.length===0)return;this.backLoaded=!1;const c=a[0].image.url;this.backPreview.src=c},this.useUrlOKButton.onclick=async e=>{e.preventDefault();const s=this.useUrlInput.value;if(!s)return;const t=/\.(jpg|jpeg|png|gif|webp|webm|mp4)$/i;try{var a=new URL(s);(a.protocol==="http:"||a.protocol==="https:")&&t.test(a.pathname)?(this.backLoaded=!1,this.backPreview.src=a.toString()):await i.notification.show("Invalid image URL.","ERROR")}catch{await i.notification.show("Invalid image URL.","ERROR")}},this.createDeckButton.onclick=async e=>{e.preventDefault(),(!this.frontLoaded||!this.backLoaded)&&await i.notification.show("Please use valid images before creating the deck.","ERROR");const s=this.backPreview.src,t=this.defaultDeckTypes.value;let a,c=!1;switch(t){case"Base52":a=o.DECK52,c=!0;break;case"Tarot Major":a=o.TAROTMAJOR;break;case"Tarot Minor":a=o.TAROTMINOR;break;case"D20":a=o.DICECARDS;break}const r=await C.PopulateDefaultDeck(s,a,c?o.GETPNGURL:o.GETWEBPURL),h=C.CreateDeck(s,r);i.scene.items.addItems(h)}}async InitializeDecked(){await P(),this.Testing()}CreateDeck(e,s,t){const a=s.Cards[0].BackSize,c=S(a.x,a.y),r=s.Cards[0].BackUrl,h=y(r),I=w({height:a.y,width:a.x,url:e,mime:`image/${h}`},{dpi:150,offset:{x:0,y:0}}).metadata({[`${l.EXTENSIONID}/deck_data`]:s}).scale(c).name("Deck").plainText(s.Cards.length.toString()).layer("PROP").build();t&&(I.position=t);const p=[[g.MOVE,o.RADIUS,0],[g.LINE,o.WIDTH-o.RADIUS,0],[g.QUAD,o.WIDTH,0,o.WIDTH,o.RADIUS],[g.LINE,o.WIDTH,o.HEIGHT-o.RADIUS],[g.QUAD,o.WIDTH,o.HEIGHT,o.WIDTH-o.RADIUS,o.HEIGHT],[g.LINE,o.RADIUS,o.HEIGHT],[g.QUAD,0,o.HEIGHT,0,o.HEIGHT-o.RADIUS],[g.LINE,0,o.RADIUS],[g.QUAD,0,0,o.RADIUS,0],[g.CLOSE]];for(let m=0;m<20;m++){const u=o.HEIGHT-m*4;p.push([g.MOVE,o.WIDTH,u-o.RADIUS]),p.push([g.QUAD,o.WIDTH,u,o.WIDTH-o.RADIUS,u]),p.push([g.LINE,o.RADIUS,u]),p.push([g.QUAD,0,u,0,u-o.RADIUS])}const d=N().commands(p).strokeOpacity(1).strokeWidth(.85).strokeColor("#000000").fillColor("#ffffff").layer("PROP").metadata({[`${l.EXTENSIONID}/deck_id_lines`]:s.Id}).zIndex(.5).build();return d.position={x:I.position.x,y:I.position.y+Math.min(s.Cards.length,75)},d.attachedTo=I.id,d.disableHit=!0,[I,d]}CreateCardFromData(e){const s=e.FaceUp?S(e.FrontSize.x,e.FrontSize.y):S(e.BackSize.x,e.BackSize.y),t=y(e.FaceUp?e.FrontUrl:e.BackUrl);return w({height:e.FaceUp?e.FrontSize.y:e.BackSize.y,width:e.FaceUp?e.FrontSize.x:e.BackSize.x,url:e.FaceUp?e.FrontUrl:e.BackUrl,mime:`image/${t}`},{dpi:150,offset:{x:0,y:0}}).metadata({[`${l.EXTENSIONID}/card_data`]:e}).scale(s).name("Card").layer("PROP").build()}async PopulateCard(){}async PopulateDefaultDeck(e,s,t){const a=[],c=A();for(const h of s){const I=await b(e),p={BackUrl:e,BackSize:I,FrontUrl:t(h),FrontSize:{x:234,y:333},DeckId:c,FaceUp:!1,Value:h};a.push(p)}return{Id:c,Cards:a}}}const C=new L;
