import"./modulepreload-polyfill-B5Qt9EMX.js";import{O as s,C as h,a as n,b as S,c as f,d as x}from"./bsConstants-Dh1qAdFO.js";function U(r){return r.type==="IMAGE"}class I{static PLAYER="PLAYER";static PARTY="PARTY";static LOCALITEMS="LOCALITEMS";static SCENEITEMS="SCENEITEMS";static SCENEMETA="SCENEMETADATA";static SCENEGRID="SCENEGRID";static ROOMMETA="ROOMMETADATA";debouncedOnSceneItemsChange;debouncedOnSceneMetadataChange;debouncedOnPartyChange;playerId;playerConnection;playerColor;playerName;playerMetadata;playerRole;currentDealer;party;lastParty;gridDpi;gridScale;sceneItems;sceneSelected;sceneMetadata;sceneReady;activeCards;activeDecks;roomMetadata;theme;caches;USER_REGISTERED;historyLog;sceneMetadataHandler;localItemsHandler;sceneItemsHandler;sceneGridHandler;sceneReadyHandler;playerHandler;partyHandler;themeHandler;roomHandler;constructor(e){this.playerId="",this.playerConnection="",this.playerName="",this.playerColor="",this.playerMetadata={},this.playerRole="PLAYER",this.currentDealer="",this.party=[],this.lastParty=[],this.sceneItems=[],this.sceneSelected=[],this.sceneMetadata={},this.activeCards=[],this.activeDecks=[],this.gridDpi=0,this.gridScale=5,this.sceneReady=!1,this.theme="DARK",this.roomMetadata={},this.USER_REGISTERED=!1,this.caches=e,this.historyLog={},this.debouncedOnSceneItemsChange=k(this.OnSceneItemsChange.bind(this),100),this.debouncedOnSceneMetadataChange=k(this.OnSceneMetadataChanges.bind(this),100),this.debouncedOnPartyChange=k(this.OnPartyChange.bind(this),100)}async InitializeCache(){this.sceneReady=await s.scene.isReady(),this.theme=await s.theme.getTheme(),O(this.theme,document),this.caches.includes(I.PLAYER)&&(this.playerId=await s.player.getId(),this.playerConnection=await s.player.getConnectionId(),this.playerName=await s.player.getName(),this.playerColor=await s.player.getColor(),this.playerMetadata=await s.player.getMetadata(),this.playerRole=await s.player.getRole()),this.caches.includes(I.PARTY)&&(this.party=await s.party.getPlayers(),this.lastParty=this.party),this.caches.includes(I.SCENEITEMS)&&this.sceneReady&&(this.sceneItems=await s.scene.items.getItems()),this.caches.includes(I.SCENEMETA)&&this.sceneReady&&(this.sceneMetadata=await s.scene.getMetadata()),this.caches.includes(I.SCENEGRID)&&this.sceneReady&&(this.gridDpi=await s.scene.grid.getDpi(),this.gridScale=(await s.scene.grid.getScale()).parsed?.multiplier??5),this.caches.includes(I.ROOMMETA)&&(this.roomMetadata=await s.room.getMetadata(),await this.RefreshDealer())}KillHandlers(){this.caches.includes(I.SCENEMETA)&&this.sceneMetadataHandler!==void 0&&this.sceneMetadataHandler(),this.caches.includes(I.SCENEITEMS)&&this.sceneItemsHandler!==void 0&&this.sceneItemsHandler(),this.caches.includes(I.SCENEITEMS)&&this.localItemsHandler!==void 0&&this.localItemsHandler(),this.caches.includes(I.SCENEGRID)&&this.sceneGridHandler!==void 0&&this.sceneGridHandler(),this.caches.includes(I.PLAYER)&&this.playerHandler!==void 0&&this.playerHandler(),this.caches.includes(I.PARTY)&&this.partyHandler!==void 0&&this.partyHandler(),this.caches.includes(I.ROOMMETA)&&this.roomHandler!==void 0&&this.roomHandler(),this.themeHandler!==void 0&&this.themeHandler()}SetupHandlers(){(this.sceneMetadataHandler===void 0||this.sceneMetadataHandler.length===0)&&this.caches.includes(I.SCENEMETA)&&(this.sceneMetadataHandler=s.scene.onMetadataChange(async e=>{this.sceneMetadata=e,this.debouncedOnSceneMetadataChange(e)})),(this.sceneItemsHandler===void 0||this.sceneItemsHandler.length===0)&&this.caches.includes(I.SCENEITEMS)&&(this.sceneItemsHandler=s.scene.items.onChange(async e=>{this.sceneItems=e,this.debouncedOnSceneItemsChange(e)})),(this.sceneGridHandler===void 0||this.sceneGridHandler.length===0)&&this.caches.includes(I.SCENEGRID)&&(this.sceneGridHandler=s.scene.grid.onChange(async e=>{this.gridDpi=e.dpi,this.gridScale=parseInt(e.scale),await this.OnSceneGridChange(e)})),(this.playerHandler===void 0||this.playerHandler.length===0)&&this.caches.includes(I.PLAYER)&&(this.playerHandler=s.player.onChange(async e=>{this.playerName=e.name,this.playerColor=e.color,this.playerId=e.id,this.playerConnection=e.connectionId,this.playerRole=e.role,this.playerMetadata=e.metadata,await this.OnPlayerChange(e)})),(this.partyHandler===void 0||this.partyHandler.length===0)&&this.caches.includes(I.PARTY)&&(this.partyHandler=s.party.onChange(async e=>{this.party=e.filter(a=>a.id!==""),this.debouncedOnPartyChange(e)})),(this.roomHandler===void 0||this.roomHandler.length===0)&&this.caches.includes(I.ROOMMETA)&&(this.roomHandler=s.room.onMetadataChange(async e=>{this.roomMetadata=e,await this.OnRoomMetadataChange(e)})),this.themeHandler===void 0&&(this.themeHandler=s.theme.onChange(async e=>{this.theme=e.mode,await this.OnThemeChange(e)})),this.sceneReadyHandler===void 0&&(this.sceneReadyHandler=s.scene.onReadyChange(async e=>{this.sceneReady=e,e&&(this.sceneItems=await s.scene.items.getItems(U),this.sceneMetadata=await s.scene.getMetadata(),this.gridDpi=await s.scene.grid.getDpi(),this.gridScale=(await s.scene.grid.getScale()).parsed?.multiplier??5),await this.OnSceneReadyChange(e)}))}async OnSceneMetadataChanges(e){this.playerRole}async OnLocalItemsChange(e){}async OnSceneItemsChange(e){if(this.sceneReady&&this.playerId===this.currentDealer){this.activeCards=this.sceneItems.filter(t=>t.metadata[`${h.EXTENSIONID}/card_data`]!==void 0),this.activeDecks=this.sceneItems.filter(t=>t.metadata[`${h.EXTENSIONID}/deck_data`]!==void 0);const a=[];for(const t of this.activeDecks){for(const i of this.activeCards)if(N(i.position,t.position,25)){const o=i.zIndex>t.zIndex,c=i.metadata[`${h.EXTENSIONID}/card_data`];c.FaceUp=!1,await s.scene.items.updateItems(u=>u.id===t.id,u=>{for(let p of u){const l=p.metadata[`${h.EXTENSIONID}/deck_data`];o?l.Cards.push(c):l.Cards.unshift(c);const m=o?l.Cards[l.Cards.length-1]:l.Cards[0],C=y(m.BackUrl);p.image.url=m.BackUrl,p.image.mime=`image/${C}`,p.text.plainText=l.Cards.length.toString()}}),a.push(i.id)}for(const i of this.activeDecks){if(i.id===t.id||a.includes(t.id))continue;if(N(i.position,t.position,25)){const o=i.zIndex>t.zIndex,c=t.metadata[`${h.EXTENSIONID}/deck_data`],u=i.metadata[`${h.EXTENSIONID}/deck_data`];await s.scene.items.updateItems(l=>l.id===t.id,l=>{for(let m of l){const C=m.metadata[`${h.EXTENSIONID}/deck_data`],g=o?[...C.Cards,...u.Cards]:[...u.Cards,...C.Cards];C.Cards=g;const D=o?C.Cards[C.Cards.length-1]:C.Cards[0],A=y(D.BackUrl);m.image.url=D.BackUrl,m.image.mime=`image/${A}`,m.text.plainText=C.Cards.length.toString()}});const p=T.sceneItems.find(l=>l.attachedTo===t.id&&l.metadata[`${h.EXTENSIONID}/deck_id_lines`]!==void 0);await s.scene.items.updateItems(l=>l.id===p.id,l=>{for(let m of l)m.position={x:t.position.x,y:t.position.y+Math.min(c.Cards.length+u.Cards.length,75)}}),a.push(i.id)}}}a.length>0&&await s.scene.items.deleteItems(a)}}async OnSceneGridChange(e){}async OnSceneReadyChange(e){}async OnPlayerChange(e){e.selection?.length}async OnPartyChange(e){e.length!==this.lastParty.length&&await this.RefreshDealer(),this.lastParty=e,console.log(e)}async OnRoomMetadataChange(e){}async OnThemeChange(e){O(e,document)}async RefreshDealer(){this.currentDealer=this.roomMetadata[`${h.EXTENSIONID}/dealer`];const e=this.currentDealer===this.playerId,a=this.party.find(t=>t.id===this.currentDealer);(!this.currentDealer||!e&&!a)&&await s.room.setMetadata({[`${h.EXTENSIONID}/dealer`]:this.playerId})}}const T=new I([I.PLAYER,I.PARTY,I.SCENEITEMS,I.SCENEMETA,I.ROOMMETA]);function M(r,e){return r=Math.ceil(r),e=Math.floor(e),Math.floor(Math.random()*(e-r+1))+r}function R(){let r=new Date().getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,a=>{const t=(r+Math.random()*16)%16|0;return r=Math.floor(r/16),(a==="x"?t:t&3|8).toString(16)})}function N(r,e,a){const t=r.x-e.x,i=r.y-e.y;return Math.sqrt(t*t+i*i)<=a}function w(r){for(let e=r.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[r[e],r[a]]=[r[a],r[e]]}return r}function y(r){const t=new URL(r).pathname.split(".").pop();return t||""}function k(r,e){let a;return function(...i){a&&clearTimeout(a),a=setTimeout(()=>{r(...i),a=void 0},e)}}function O(r,e){const a=window.matchMedia("(prefers-color-scheme: dark)"),t=a.matches?"dark":"light",i=a.matches?"light":"dark";for(var d=0;d<e.styleSheets.length;d++)for(var o=0;o<e.styleSheets[d].cssRules.length;o++){let c=e.styleSheets[d].cssRules[o];c&&c.media&&c.media.mediaText.includes("prefers-color-scheme")&&(r.mode=="LIGHT"?(c.media.appendMedium(`(prefers-color-scheme: ${t})`),c.media.mediaText.includes(i)&&c.media.deleteMedium(`(prefers-color-scheme: ${i})`)):r.mode=="DARK"&&(c.media.appendMedium(`(prefers-color-scheme: ${i})`),c.media.mediaText.includes(t)&&c.media.deleteMedium(`(prefers-color-scheme: ${t})`)))}}async function v(){await s.contextMenu.create({id:h.CUTCARDSID,icons:[{icon:"/icon.svg",label:"Cut Deck",filter:{every:[{key:["metadata",`${h.EXTENSIONID}/deck_data`],value:void 0,operator:"!=",coordinator:"&&"}],max:1}}],async onClick(r,e){for(const a of r.items){const t=a.metadata[`${h.EXTENSIONID}/deck_data`];if(t.Cards.length<=3)await s.notification.show("You need at least four cards to cut the deck.");else{const i=Math.ceil(t.Cards.length/2),d=t.Cards.slice(0,i),o=t.Cards.slice(i);await s.scene.items.updateItems(r.items,m=>{for(let C of m){const g=d[d.length-1],D=y(g.BackUrl);C.metadata[`${h.EXTENSIONID}/deck_data`]={Id:t.Id,Cards:d},C.image.url=g.BackUrl,C.image.mime=`image/${D}`,C.text.plainText=d.length.toString()}});const c=T.sceneItems.find(m=>m.attachedTo===a.id&&m.metadata[`${h.EXTENSIONID}/deck_id_lines`]!==void 0);await s.scene.items.updateItems(m=>m.id===c.id,m=>{for(let C of m)C.position={x:a.position.x,y:a.position.y+Math.min(d.length,75)}});const u={x:a.position.x+300,y:a.position.y},p={Cards:o,Id:o[0].DeckId},l=E.CreateDeck(o[p.Cards.length-1].BackUrl,p,u);s.scene.items.addItems(l)}}}}),await s.contextMenu.create({id:h.SHUFFLECARDSID,icons:[{icon:"/icon.svg",label:"Shuffle Cards",filter:{every:[{key:["metadata",`${h.EXTENSIONID}/deck_data`],value:void 0,operator:"!=",coordinator:"&&"}]}}],async onClick(r,e){await s.scene.items.updateItems(r.items,a=>{for(let t of a){const i=t.metadata[`${h.EXTENSIONID}/deck_data`];i.Cards=w(i.Cards);const d=i.Cards[i.Cards.length-1],o=y(d.BackUrl);t.image.url=d.BackUrl,t.image.mime=`image/${o}`}}),await s.notification.show("The deck has been shuffled.","DEFAULT")}}),await s.contextMenu.create({id:h.FLIPCARDID,icons:[{icon:"/icon.svg",label:"Flip Card",filter:{every:[{key:["metadata",`${h.EXTENSIONID}/card_data`],value:void 0,operator:"!=",coordinator:"&&"}]}}],async onClick(r,e){await s.scene.items.updateItems(r.items,a=>{for(let t of a){const i=t.metadata[`${h.EXTENSIONID}/card_data`],d=y(i.FaceUp===!0?i.BackUrl:i.FrontUrl);t.image.url=i.FaceUp===!0?i.BackUrl:i.FrontUrl,t.image.mime=`image/${d}`,i.FaceUp=i.FaceUp!==!0,t.metadata[`${h.EXTENSIONID}/card_data`]=i}})}}),await s.contextMenu.create({id:h.GROUPCARDSID,icons:[{icon:"/icon.svg",label:"Group Cards",filter:{every:[{key:["metadata",`${h.EXTENSIONID}/card_data`],value:void 0,operator:"!=",coordinator:"&&"}],min:2}}],async onClick(r,e){const t=r.items[0].position,i=[];for(let c of r.items){const u=c.metadata[`${h.EXTENSIONID}/card_data`];u.FaceUp=!1,i.push(u)}const d={Cards:i,Id:i[0].DeckId},o=E.CreateDeck(i[d.Cards.length-1].BackUrl,d,t);s.scene.items.addItems(o),s.scene.items.deleteItems(r.items.map(c=>c.id))}}),await s.contextMenu.create({id:h.DRAWCARDID,icons:[{icon:"/icon.svg",label:"Draw Card",filter:{every:[{key:["metadata",`${h.EXTENSIONID}/deck_data`],value:void 0,operator:"!=",coordinator:"&&"}]}}],async onClick(r,e){const a=[];let t=300+M(10,35),i=0+M(10,35);for(const d of r.items){const o=d.metadata[`${h.EXTENSIONID}/deck_data`],c=o.Cards[o.Cards.length-1];if(c){const u=E.CreateCard(c.FrontUrl,c.BackUrl,c.Value,c.FaceUp,c.DeckId);if(u.position={x:d.position.x+t,y:d.position.y+i},a.push(u),o.Cards.length>2){await s.scene.items.updateItems(r.items,l=>{for(let m of l){const C=m.metadata[`${h.EXTENSIONID}/deck_data`];C.Cards.pop();const g=C.Cards[C.Cards.length-1],D=y(g.BackUrl);m.image.url=g.BackUrl,m.image.mime=`image/${D}`,m.text.plainText=C.Cards.length.toString()}});const p=T.sceneItems.find(l=>l.attachedTo===d.id&&l.metadata[`${h.EXTENSIONID}/deck_id_lines`]!==void 0);await s.scene.items.updateItems(l=>l.id===p.id,l=>{for(let m of l)m.position={x:d.position.x,y:d.position.y+Math.min(o.Cards.length,75)}})}else if(o.Cards.length===2){const p=o.Cards[0],l=E.CreateCard(p.FrontUrl,p.BackUrl,p.Value,p.FaceUp,p.DeckId);l.position={x:d.position.x,y:d.position.y},a.push(l),await s.scene.items.deleteItems(r.items.map(m=>m.id))}}}await s.scene.items.addItems(a)}})}document.querySelector("#app").innerHTML=`
  <div>
    Hello.
    <button id="makecard">Make a Card</button>
    <button id="makedeck">Make a Deck</button>
    <button id="makemajor">Make a Major</button>
    <button id="makeminor">Make a Minor</button>
  </div>
`;async function H(){await T.InitializeCache(),await E.InitializeDecked(),T.SetupHandlers()}s.onReady(async()=>{if(await s.scene.isReady()===!1){const e=s.scene.onReadyChange(async a=>{a&&(e(),await H())})}else await H()});class P{constructor(){}async Testing(){const e=document.getElementById("makedeck");e.onclick=async d=>{d.preventDefault();const o=E.PopulateDeck(n.BACK_ABSTRACT,n.DECK52,n.GETCARDURL),c=E.CreateDeck(n.BACK_ABSTRACT,o);s.scene.items.addItems(c)};const a=document.getElementById("makemajor");a.onclick=async d=>{d.preventDefault();const o=E.PopulateDeck(n.BACK_ASTRONAUT,n.TAROTMAJOR,n.GETTAROTURL),c=E.CreateDeck(n.BACK_ASTRONAUT,o);s.scene.items.addItems(c)};const t=document.getElementById("makeminor");t.onclick=async d=>{d.preventDefault();const o=E.PopulateDeck(n.BACK_SCENE,n.TAROTMINOR,n.GETTAROTURL),c=E.CreateDeck(n.BACK_SCENE,o);s.scene.items.addItems(c)};const i=document.getElementById("makecard");i.onclick=async d=>{d.preventDefault();const o=E.CreateCard(n.CLUBS_10,n.BACK_CLOUDS,"clubs_10",!0,R());s.scene.items.addItems([o])}}async InitializeDecked(){await v(),this.Testing()}CreateDeck(e,a,t){const i=a.Cards[0].BackUrl,d=y(i),o=S({height:n.HEIGHT,width:n.WIDTH,url:e,mime:`image/${d}`},{dpi:150,offset:{x:0,y:0}}).metadata({[`${h.EXTENSIONID}/deck_data`]:a}).name("Deck").plainText(a.Cards.length.toString()).layer("PROP").build();t&&(o.position=t);const c=[[f.MOVE,n.RADIUS,0],[f.LINE,n.WIDTH-n.RADIUS,0],[f.QUAD,n.WIDTH,0,n.WIDTH,n.RADIUS],[f.LINE,n.WIDTH,n.HEIGHT-n.RADIUS],[f.QUAD,n.WIDTH,n.HEIGHT,n.WIDTH-n.RADIUS,n.HEIGHT],[f.LINE,n.RADIUS,n.HEIGHT],[f.QUAD,0,n.HEIGHT,0,n.HEIGHT-n.RADIUS],[f.LINE,0,n.RADIUS],[f.QUAD,0,0,n.RADIUS,0],[f.CLOSE]];for(let p=0;p<20;p++){const l=n.HEIGHT-p*4;c.push([f.MOVE,n.WIDTH,l-n.RADIUS]),c.push([f.QUAD,n.WIDTH,l,n.WIDTH-n.RADIUS,l]),c.push([f.LINE,n.RADIUS,l]),c.push([f.QUAD,0,l,0,l-n.RADIUS])}const u=x().commands(c).strokeOpacity(1).strokeWidth(.85).strokeColor("#000000").fillColor("#ffffff").layer("PROP").metadata({[`${h.EXTENSIONID}/deck_id_lines`]:a.Id}).zIndex(.5).build();return u.position={x:o.position.x,y:o.position.y+Math.min(a.Cards.length,75)},u.attachedTo=o.id,u.disableHit=!0,[o,u]}CreateCard(e,a,t,i,d){const o=y(i?e:a),c={BackUrl:a,FrontUrl:e,FaceUp:i,Value:t,DeckId:d};return S({height:n.HEIGHT,width:n.WIDTH,url:i?e:a,mime:`image/${o}`},{dpi:150,offset:{x:0,y:0}}).metadata({[`${h.EXTENSIONID}/card_data`]:c}).name("Card").layer("PROP").build()}PopulateDeck(e,a,t){const i=[],d=R();for(const c of a){const u={BackUrl:e,FrontUrl:t(c),DeckId:d,FaceUp:!1,Value:c};i.push(u)}return{Id:d,Cards:i}}}const E=new P;
